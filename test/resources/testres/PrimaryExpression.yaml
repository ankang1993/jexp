- desc: base string
  exp: '"hello world"'
  res: hello world

- desc: string connect
  exp: '"hello" + " " + "world"'
  res: hello world

- desc: string connect 2
  exp: '1 + 2 + "hello" + " " + "world"'
  res: 3hello world

- desc: string escaping 1
  exp: '"hello \" world"'
  res: 'hello " world'

- desc: string escaping 2
  exp: '"hello \ world"'
  res: 'hello \ world'

- desc: single quote string
  exp: "'hello world'"
  res: hello world

- desc: string escaping 3
  exp: "'hello \\' world'"
  res: "hello ' world"

- desc: integer literal
  exp: 10000000
  res: 10000000

- desc: integer literal 2
  exp: -10000000
  res: -10000000

- desc: hex literal
  exp: 0x1000
  res: 4096

- desc: oct literal
  exp: 01000
  res: 512

- desc: zero
  exp: 0
  res: 0

- desc: double literal
  exp: 1.0
  res: 1.0

- desc: double literal 2
  exp: -1.0
  res: -1.0

- desc: double zero
  exp: 0.0
  res: 0.0

- desc: double zero 2
  exp: -0.0
  res: -0.0

- desc: true
  exp: true
  res: true

- desc: true 2
  exp: '!false'
  res: true

- desc: false
  exp: false
  res: false

- desc: false 2
  exp: '!true'
  res: false

- desc: eqeq constant 1
  exp: '"a" == "b"'
  res: false

- desc: eqeq constant 2
  exp: '"a" == "a"'
  res: true

- desc: noteq constant 1
  exp: '"a" != "a"'
  res: false

- desc: noteq constant 2
  exp: '"a" != "b"'
  res: true

- desc: simple typed var
  exp: a + b * c
  ctx:
    class: 'ranttu.rapid.jexp.data.SimpleContext'
    a: 12
    b: 123
    c: 23
  res: 2841

- desc: simple mapped var
  exp: a + b * c.c - d
  ctx:
    a: 12
    b: 123
    c:
      c: 23
    d: -10
  res: 2851

- desc: long typed var
  exp: o.o.o.o.o.o.a + o.o.o.o.o.o.o.b * o.o.o.o.o.o.o.o.c
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: -749746734

- desc: dynamic type access
  exp: o["some" + "Val"]
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: '233'

- desc: dynamic map access
  exp: a + b * c["ccc"] - d
  ctx:
    a: 12
    b: 123
    c:
      ccc: 23
    d: -10
  res: 2851

- desc: dynamic type access - 2
  exp: o[a()]
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: 12312312

- desc: dynamic type access - 3
  exp: o["some" + "Val"].empty
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: false

- desc: dynamic type access - 4
  exp: a().empty
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: false

- desc: minus
  exp: -a
  ctx:
    a: 1
  res: -1

- desc: not
  exp: '!a'
  ctx:
    a: true
  res: false

- desc: list exp
  exp: '["hello", "world"]'
  res:
    - hello
    - world

- desc: list exp 2
  exp: '["hello", "world" + 3, a == b]'
  ctx:
    a: 1
    b: 2
  res:
    - hello
    - world3
    - false

- desc: list exp get
  exp: '["hello", "world"][0]'
  res: hello

- desc: list exp invoke
  exp: '["hello", "world"].size()'
  res: 2

- desc: list exp embedded
  exp: '["hello", "world", [1, 2, 3]][2][0]'
  res: 1

- desc: int arr
  exp: 'int_arr()[1]'
  res: 2

- desc: double arr
  exp: 'double_arr()[1]'
  res: 2.2

- desc: boolean arr
  exp: 'boolean_arr()[1]'
  res: false

- desc: complex arr
  exp: 'complex_arr()[3][4]'
  res: s5

- desc: and 1
  exp: '0 and "hello world"'
  res: 0

- desc: and 2
  exp: '1 && "hello world"'
  res: "hello world"

- desc: and 3
  exp: 'someVal && b'
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: -9798

- desc: and 4
  exp: 'someVal && b && a'
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  res: 12312312

- desc: or 1
  exp: '0 or "hello world"'
  res: "hello world"

- desc: or 2
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  exp: 'a || b'
  res: 12312312

- desc: or 3
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  exp: 'a || b || someVal'
  res: 12312312

- desc: or 4
  ctx:
    class: 'ranttu.rapid.jexp.data.ImmutableRecursiveContext'
  exp: '!(a || b)'
  res: false

- desc: complex access 1
  exp: 'a[["key0", "key1"].get(1)]'
  ctx:
    a:
      key0: hello
      key1: world
  res: world

- desc: string connect 3
  exp: '1 * 2 + 3 + " nima " + int_arr()[0] + 4'
  res: '5 nima 14'

- desc: static array access
  exp: 'a[0]'
  ctx:
    a:
      - 'hello'
      - 'world'
  res: 'hello'

- desc: map literal
  exp: '{ first: a[0], second: a[1] }'
  ctx:
    a:
      - 'hello'
      - 'world'
  res:
    first: hello
    second: world

- desc: map literal 2
  exp: '{ first: a[0], second: a[1] + "3", third: a == 1 }'
  ctx:
    a:
      - 'hello'
      - 'world'
  res:
    first: hello
    second: world3
    third: false

- desc: map literal access
  exp: '{ first: a[0], second: a[1] }.second'
  ctx:
    a:
      - 'hello'
      - 'world'
  res: 'world'

- desc: map literal access 2
  exp: '{ first: a[0], second: a[1] }[a[2]]'
  ctx:
    a:
      - 'hello'
      - 'world'
      - 'second'
  res: 'world'