- desc: one
  exp: 'one()'
  res: 1

- desc: two
  exp: 'two()'
  res: 2

- desc: one and two
  exp: 'two() + one()'
  res: 3

- desc: sum up
  exp: 'sum(two(), one(), two() + 1)'
  res: 6

- desc: get str
  exp: 'get_str(get_str("rapid"))'
  res: 'hello world: hello world: rapid!!'

- desc: len
  exp: 'sum(string.length(get_str("rapid")), sum(1, 2, 3), two())'
  res: 27

- desc: is_blank
  exp: 'string.is_blank(get_str(""))'
  res: false

- desc: ub bool to bool
  exp: 'bool_ide(a == b)'
  res: false
  ctx:
    a: 'a'
    b: 'b'

- desc: ub bool to boolw
  exp: 'boolw_ide(a == b)'
  res: false
  ctx:
    a: 'a'
    b: 'b'

- desc: ub boolw to bool
  exp: 'bool_ide("a" == "b")'
  res: false

- desc: ub boolw to bool 2
  exp: 'bool_ide(true)'
  res: true

- desc: ub boolw to bool 3
  exp: 'bool_ide(false)'
  res: false

- desc: ub boolw to boolw
  exp: 'boolw_ide("a" == "b")'
  res: false

- desc: ub intw to int
  exp: 'int_ide(1)'
  res: 1

- desc: ub intw to intw
  exp: 'intw_ide(1)'
  res: 1

- desc: ub doublew to double
  exp: 'double_ide(1.1)'
  res: 1.1

- desc: ub doublew to doublew
  exp: 'doublew_ide(1.1)'
  res: 1.1

- desc: lang.invoke_no_args
  exp: 'lang.invoke_no_args("hello world", "length")'
  res: 11

- desc: bounded invoke 1
  exp: 'a.length()'
  ctx:
    a: 'hello world'
  res: 11

- desc: bounded invoke 2
  exp: 'a.get(b) + a.get(c)'
  ctx:
    a:
      keyA: 123
      keyB: 234
    b: 'keyA'
    c: 'keyB'
  res: 357

- desc: bounded invoke 3
  exp: 'a.get(b)'
  ctx:
    a:
      - 1
      - 3
      - 5
      - 7
    b: 2
  res: 5

- desc: constant invoke
  exp: '"hello world".hashCode()'
  res: 1794106052

- desc: constant invoke 2
  exp: '["hello", "world" + "!"].get(1)'
  res: world!

- desc: constant invoke 3
  exp: '["one" + a, "two" + b, "three" + c].get(d)'
  ctx:
    a: 1
    b: 2
    c: 3
    d: 1
  res: two2

- desc: constant invoke 4
  exp: '("a" + "b").length()'
  res: 2

- desc: constant invoke 5
  exp: '("a" == "b").hashCode()'
  res: 1237

- desc: constant invoke 6
  exp: '(a == b).hashCode()'
  ctx:
    a: 1
    b: 1
  res: 1231

- desc: pass string to func 2
  exp: 'check_not_sb("a" + "b")'

- desc: pass string to func 3
  exp: 'check_not_sb(a + b)'
  ctx:
    a: 'hello'
    b: 'world'

- desc: simple lambda
  exp: 'lang.run_func(() => {1}, [])'
  res: 1

- desc: simple lambda 2
  exp: 'lang.run_func((a, b) => {a + b}, ["hello", "world"])'
  res: helloworld

- desc: lambda closure 1
  exp: 'lang.run_func((b) => {a + b}, ["hello"])'
  ctx:
    a: "world"
    b: "nima"
  res: worldhello

- desc: lambda closure 2
  exp: 'a + lang.run_func((b) => {a + b}, ["hello"]) + b'
  ctx:
    a: "world"
    b: "nima"
  res: worldworldhellonima

- desc: lambda closure 3
  exp: 'lang.run_func(lang.run_func((b) => { (a) => {a - b - c} }, [2]), [1])'
  ctx:
    a: 2142141
    b: -1312341
    c: 77777
  res: -77778