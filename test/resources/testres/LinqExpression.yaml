- desc: simple select 1
  exp: '(from c in "12345" select c.toString()).toList()'
  res: ["1", "2", "3", "4", "5"]

- desc: simple select 2
  exp: '(from c in "12345" + " 8" select c.toString()).toList()'
  res: ["1", "2", "3", "4", "5", " ", "8"]

- desc: simple select 3
  exp: '(from c in a == b select c).findFirst().get()'
  ctx:
    a: 1
    b: 2
  res: false

- desc: cross join
  exp: '(from i in a from j in b select j + i).toList()'
  res: ['a1', 'b1', 'c1', 'd1', 'e1', 'a2', 'b2', 'c2', 'd2', 'e2', 'a3', 'b3', 'c3', 'd3', 'e3', 'a4', 'b4', 'c4', 'd4', 'e4', 'a5', 'b5', 'c5', 'd5', 'e5']
  ctx:
    a: [1, 2, 3, 4, 5]
    b: 'abcde'

- desc: cross join 2
  exp: '(from i in a from j in b select { i: i, j: "" + j }).toList()'
  ctx:
    a: [1, 2]
    b: 'abc'
  res:
    - {i: 1, j: a}
    - {i: 1, j: b}
    - {i: 1, j: c}
    - {i: 2, j: a}
    - {i: 2, j: b}
    - {i: 2, j: c}


- desc: let clause
  exp: '(from i in a let i2 = i * 2 select i2 * 3).toList()'
  ctx:
    a: [1, 2, 3, 4, 5]
  res: [6, 12, 18, 24, 30]

- desc: where clause
  exp: '(from i in a where i == 2 or i == 3 or i == 5 select i).toList()'
  ctx:
    a: [1, 2, 3, 4, 5]
  res: [2, 3, 5]

- desc: orderby clause
  exp: '(from w in a orderby w.length() descending, w ascending select w).toList()'
  ctx:
    a:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
  res:
    - oranges
    - peaches
    - hello
    - pears
    - world
    - bug
    - hat

- desc: inner join
  exp: '(from outer in a join inner in b on outer.length() equals inner.length() select outer + inner).toList()'
  ctx:
    a:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
    b:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
  res:
    - hellohello
    - helloworld
    - hellopears
    - worldhello
    - worldworld
    - worldpears
    - hathat
    - hatbug
    - bughat
    - bugbug
    - peachespeaches
    - peachesoranges
    - pearshello
    - pearsworld
    - pearspears
    - orangespeaches
    - orangesoranges

- desc: inner join
  exp: '(from outer in a join inner in b on outer.length() equals inner.length() into g select outer + ": " + g.toList()).toList()'
  ctx:
    a:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
    b:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
  res:
    - 'hello: [hello, world, pears]'
    - 'world: [hello, world, pears]'
    - 'hat: [hat, bug]'
    - 'bug: [hat, bug]'
    - 'peaches: [peaches, oranges]'
    - 'pears: [hello, world, pears]'
    - 'oranges: [peaches, oranges]'

- desc: embedded from
  exp: '(from i in a from j in (from t in i select t) orderby i select i + ": " + j).toList()'
  ctx:
    a:
      - hat
      - bug
      - a
  res:
    - 'a: a'
    - 'bug: b'
    - 'bug: u'
    - 'bug: g'
    - 'hat: h'
    - 'hat: a'
    - 'hat: t'

- desc: group into
  exp: '(from i in a group i by i.length() into g orderby g.key descending select g.key + ": " + g.value).toList()'
  ctx:
    a:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
  res:
    - '7: [peaches, oranges]'
    - '5: [hello, world, pears]'
    - '3: [hat, bug]'

- desc: group into
  exp: '(from i in a group i by i.length()).map((e) => e.key + ": " + e.value).toList()'
  ctx:
    a:
      - hello
      - world
      - hat
      - bug
      - peaches
      - pears
      - oranges
  res:
    - '3: [hat, bug]'
    - '5: [hello, world, pears]'
    - '7: [peaches, oranges]'