group 'ranttu.rapid.jexp'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'de.jflex:jflex:1.6.1'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-beanutils:commons-beanutils:1.9.3'

    testCompile 'org.testng:testng:6.11'
    testCompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.8'
    testCompile 'com.fasterxml.jackson.core:jackson-core:2.8.8'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.8'

    /** for benchmark */
    testCompile 'com.googlecode.aviator:aviator:3.1.0'
    testCompile 'org.mvel:mvel2:2.3.2.Final'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "de.jflex:jflex:1.6.1"
    }
}

test {
    useTestNG()

    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

sourceSets {
    main {
        java.srcDirs = ['src/java']
        resources.srcDirs = ['src/resources']
    }

    test {
        java.srcDirs = ['test/java']
        resources.srcDirs = ['test/resources']
    }
}

import jflex.Main
import jflex.GeneratorException

class JflexTask extends DefaultTask {
    @InputDirectory
    File srcDir

    @OutputDirectory
    File destDir

    @TaskAction
    void generateAndTransformJflex() throws Exception {
        def flexFiles = project.fileTree(dir: srcDir, include: '**/*.flex')

        if(flexFiles.filter {!it.directory}.empty) {
            logger.warn("no flex files found")
        } else {
            flexFiles.visit { FileVisitDetails file ->
                if (file.isDirectory()) {
                    return
                }

                try {
                    def args = ['-q', file.file.absolutePath,
                                '-d', destDir.absolutePath + '/'] as String[]

                    logger.info "running jflex $args"

                    Main.generate(args)

                    logger.info "Java code generated from JFlex file : $file.relativePath"
                } catch (GeneratorException e) {
                    logger.error("JFlex $e.message", e)
                    throw new StopActionException('error occurred during JFlex code generation')
                }
            }
        }

    }
}

task jflex(type: JflexTask) {
    srcDir = project.file('src/jflex')
    destDir = project.file('src/java/ranttu/rapid/jexp/compile/jflex')
}
compileJava.dependsOn jflex
